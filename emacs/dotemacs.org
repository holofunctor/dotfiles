#+title: Dotemacs
#+author: holofunctor
#+property: header-args :tangle yes
#+startup: showeverything

* General

** Enable Emacs Server

#+begin_src emacs-lisp
  (server-start)
#+end_src

* Environment

#+begin_src emacs-lisp

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
 
#+end_src

* Package Management

** Using ~straight.el~

Rather than ~package.el~, adopting ~straight.el~

#+begin_src emacs-lisp 

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; For emacs version >= 27
  (setq package-enable-at-startup nil)

#+end_src

*** Integration with ~use-package~

#+begin_src emacs-lisp
  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src

* Constants
** Tab Width

#+begin_src emacs-lisp

  (setq-default tab-width 4)

#+end_src

* Appearance

** Window

*** Transparent Title Bar

#+begin_src emacs-lisp

  (use-package ns-auto-titlebar
       :straight t
       :config
       (when (eq system-type 'darwin) (ns-auto-titlebar-mode)))

#+end_src

*** Minimal UI

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the ~(menu-bar-mode -1)~ line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell nil)

  (column-number-mode)

  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (defvar coda/frame-transparency '(100 . 100))
  (set-frame-parameter (selected-frame) 'alpha coda/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,coda/frame-transparency))

  ;; Maximized
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;; 
#+end_src

** Font

#+begin_src emacs-lisp

  ;; Set the default font face
  ;; (set-face-attribute 'default nil :font "SauceCodePro Nerd Font Mono" :height 160)

  ;; Set the fixed pitch face
  ;; (set-face-attribute 'fixed-pitch nil :font "SauceCodePro Nerd Font Mono" :height 160)

  ;; Set the variable pitch face
  ;;(set-face-attribute 'variable-pitch nil :font "Helvetica Neue" :height 160 :weight 'regular)

#+end_src

*** All the icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p))

#+end_src

** Colors

*** Rainbow mode

This minor mode sets background color to strings that match color names.

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode))

#+end_src

*** Rainbow Delimiters

rainbow-delimiters is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth. This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src

** Themes

*** Evernite theme

#+begin_src emacs-lisp

  ;; Load evernite theme
  (load-file "~/dotfiles/emacs/themes/evernite-theme/evernite-theme.el")
  (load-theme 'evernite t) 

#+end_src

** Modeline

*** Lambda-modeline

#+begin_src emacs-lisp

  (load-file "~/.emacs.d/lisp/lambda-line/lambda-line.el")

  (use-package lambda-line
    :straight nil
    :ensure nil
    :custom
    (lambda-line-icon-time t) ;; requires ClockFace font (see below)
    (lambda-line-clockface-update-fontset "ClockFaceRect") ;; set clock icon
    (lambda-line-position 'top) ;; Set position of status-line 
    (lambda-line-abbrev t) ;; abbreviate major modes
    (lambda-line-hspace "  ")  ;; add some cushion
    (lambda-line-prefix t) ;; use a prefix symbol
    (lambda-line-prefix-padding nil) ;; no extra space for prefix 
    (lambda-line-status-invert nil)  ;; no invert colors
    (lambda-line-gui-ro-symbol  " ⨂") ;; symbols
    (lambda-line-gui-mod-symbol " ⬤") 
    (lambda-line-gui-rw-symbol  " ◯") 
    (lambda-line-space-top +.50)  ;; padding on top and bottom of line
    (lambda-line-space-bottom -.50)
    (lambda-line-symbol-position 0.1) ;; adjust the vertical placement of symbol
    :config
    ;; activate lambda-line 
    (lambda-line-mode) 
    ;; set divider line in footer
    (when (eq lambda-line-position 'top)
      (setq-default mode-line-format (list "%_"))
      (setq mode-line-format (list "%_"))))

#+end_src

* Keybindings

** Evil mode

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience. [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key. [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode.

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :after evil
    :config
    (general-create-definer coda/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (coda/leader-keys
      "ri" '(lambda () (interactive) (load-file
(expand-file-name "~/.emacs.d/init.el")))
      "rt" '(lambda () (interactive) (load-file
(expand-file-name "~/dotfiles/emacs/themes/evernite-theme/evernite-theme.el")))
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")
      "fi" '(lambda () (interactive) (find-file (expand-file-name "~/dotfiles/emacs/dotemacs.org")))))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

* Functionalities

** Neat Backup Files

#+begin_src emacs-lisp

;; NOTE: If you want to move everything out of the ~/.emacs.d folder
;; reliably, set `user-emacs-directory` before loading no-littering!
;(setq user-emacs-directory "~/.cache/emacs")

(use-package no-littering
  :straight t)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  
#+end_src

** Which-key

#+begin_src emacs-lisp

 (use-package which-key
  :straight t
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 1))
  
#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp

  (use-package ivy
    :straight t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :straight t
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :straight t
    :bind (("M-x" . 'counsel-M-x)
  	 ("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

** Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
    :config
    (setq help-window-select t))
    
#+end_src

* Editing
** Major modes

*** Rocq (Coq)

#+begin_src emacs-lisp
  (use-package proof-general
  :config
  (setq coq-one-command-per-line nil
  	;; this is an emacs-wide thing to make windows split nicely. Works for my Framework laptop's screen, tweak as necessary for yours
  	  split-width-threshold 140) 
  ;; :bind
  ;; (:map coq-mode-map
  ;; ;; "if electric terminators enabled, also assert up to point when starting a subcase."
  ;; ("-" . (lambda () (interactive) (coq-subcase-insert ?-)))
  ;; ("*" . (lambda () (interactive) (coq-subcase-insert ?*)))
  ;; ("+" . (lambda () (interactive) (coq-subcase-insert ?+))))
  )

  (defun coq-subcase-insert (sym)
  "if electric terminators are enabled, then also assert up to point when inserting the character sym."
  (interactive "P")
  (progn (self-insert-command 1 sym)
  	   (if (and
  			proof-electric-terminator-enable
  			(not (proof-inside-comment (point)))
  			(not (proof-inside-string (point))))
  		   (proof-assert-until-point))))
#+end_src

*** Haskell

#+begin_src emacs-lisp

  (use-package haskell-mode) 

#+end_src

*** AucTeX

#+begin_src emacs-lisp

  ;; LaTeX mode configurations
  (use-package auctex
    :defer t
    :ensure t
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-PDF-mode t)
    (setq TeX-engine 'xetex)
    (setq TeX-view-program-list '(("Preview" "open -a Preview.app %s.pdf")))
    (setq TeX-view-program-selection '((output-pdf "Preview"))))

#+end_src

** Company Mode

#+begin_src emacs-lisp

  (use-package company
    ;; :after lsp-mode
    :hook (prog-mode . company-mode)
          (org-mode . company-mode)
  	;; (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          ;; (:map lsp-mode-map
          ;;  ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Smart parentheses

#+begin_src emacs-lisp

  (use-package smartparens
    :config (require 'smartparens-config)
            (smartparens-global-mode))

#+end_src

** Lsp Mode

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . coda/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)
    (lsp-enable-which-key-integration t))
    
#+end_src

*** lsp-ui

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs

#+begin_src emacs-lisp

  (use-package lsp-treemacs
  :after lsp)

#+end_src

*** lsp-ivy

#+begin_src emacs-lisp

  (use-package lsp-ivy
    :after lsp)
    
#+end_src

* Org Mode

** Basic Config

#+begin_src emacs-lisp

   (use-package org
     :hook
     (org-mode . variable-pitch-mode)
     (org-mode . visual-line-mode)
     (org-mode . prettify-symbols-mode)
     :config
     (setq org-hide-emphasis-markers t)
  )

#+end_src

*** Org-mode fontfaces

#+begin_src emacs-lisp

#+end_src

*** Nicer Leading Stars

#+begin_src emacs-lisp

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
    :config
    (setq org-hide-leading-stars t))

#+end_src

*** Center Org Buffers

We use visual-fill-column to center org-mode buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document. This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

  #+begin_src emacs-lisp

    (defun coda/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . coda/org-mode-visual-fill))

  #+end_src
  
** Structure Templates

#+begin_src emacs-lisp

  (use-package org-tempo
    :straight nil
    :after org
    :config
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

**** Babel Languages

#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
  		(scheme . t)
	  (shell . t)
          (python . t)
          (C . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

* Auto-tangle and Reload on Save

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
